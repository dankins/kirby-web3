import { TrustedWebService } from "./Service";
import { InMemoryPersistence } from "./persistence/InMemoryPersistence";

const USERNAME = "__test__";
const PASSWORD = "__test__";
const ENTROPY = "a4ce544338d265ac873945c3cc7c3909";

describe("TrustedWebService", () => {
  let service: TrustedWebService;
  let persistence: InMemoryPersistence;
  beforeEach(() => {
    persistence = new InMemoryPersistence();
    service = new TrustedWebService(persistence);
  });

  it("constructs", () => {
    expect(service).toBeDefined();
  });

  it("signup", async () => {
    const account = await service.createAccount(USERNAME, PASSWORD, ENTROPY);
    expect(account.username).toEqual(USERNAME);
    expect(account.wallet.entropy).toEqual(ENTROPY);
    // account.wallet.ivHex is random every time so don't bother checking it
    // authKey is the generated by encrypting `username::password` using a hardcoded IV
    expect(account.authLookupKey).toEqual("24aa419d619cd4c95f6c594ca347069de55dd80dc620a6158e8895da712ac853");
    expect(persistence.auth[account.authLookupKey]).toEqual({
      iv: account.wallet.ivHex,
      cipherText: account.wallet.cipherTextHex,
    });
  });

  it("login", async () => {
    const accountSignup = await service.createAccount(USERNAME, PASSWORD, ENTROPY);
    const truename = await service.login(USERNAME, PASSWORD);
    expect(truename.entropy).toEqual(accountSignup.wallet.entropy);
  });

  it("login - not found", async () => {
    await expect(service.login(USERNAME, PASSWORD)).rejects.toEqual(new Error("error retrieving cipherText"));
  });
});
